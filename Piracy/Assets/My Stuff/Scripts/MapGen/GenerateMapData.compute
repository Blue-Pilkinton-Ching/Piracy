// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct MapPoint
{
    float3 color;
    float height;
    float isSpawnPoint;
};

RWStructuredBuffer<MapPoint> mapPoints;

StructuredBuffer<float> oceanHeight;

const float chunkWidth;
const float2 chunkPosition;

const float biomeCount = 3;

float Unity_Lerp_float(float A, float B, float T)
{
    return lerp(A, B, T);
}

float Unity_Posterize_float(float In, float Steps)
{
    return floor(In / (1 / Steps)) * (1 / Steps);
}

float rand_float2(float2 uv)
{
    return frac(sin(dot(uv, float2(12.98457, 78.2334))) * 43758.5453);
}

float2 unity_voronoi_noise_randomVector (float2 UV, float offset)
{
    float2x2 m = float2x2(15.27, 47.63, 99.41, 89.98);
    UV = frac(sin(mul(UV, m)) * 46839.32);
    return float2(sin(UV.y*+offset)*0.5+0.5, cos(UV.x*offset)*0.5+0.5);
}

void Unity_Voronoi_float(float2 UV, float AngleOffset, float CellDensity, out float softEdge, out float2 continent)
{
    float2 g = floor(UV * CellDensity);
    float2 f = frac(UV * CellDensity);
    float3 res = float3(8.0, 0.0, 0.0);

    for(int y=-1; y<=1; y++)
    {
        for(int x=-1; x<=1; x++)
        {
            float2 lattice = float2(x,y);
            float2 offset = unity_voronoi_noise_randomVector(lattice + g, AngleOffset);
            float d = distance(lattice + offset, f);
            if(d < res.x)
            {
                res = float3(d, offset.x, offset.y);

                softEdge = res.x;
                continent = float2(Unity_Posterize_float(rand_float2(offset), biomeCount), 1);
            }
        }
    }
}

float2 unity_gradientNoise_dir(float2 p)
{
    p = p % 289;
    float x = (34 * p.x + 1) * p.x % 289 + p.y;
    x = (34 * x + 1) * x % 289;
    x = frac(x / 41) * 2 - 1;
    return normalize(float2(x - floor(x + 0.5), abs(x) - 0.5));
}

float unity_gradientNoise(float2 p)
{
    float2 ip = floor(p);
    float2 fp = frac(p);
    float d00 = dot(unity_gradientNoise_dir(ip), fp);
    float d01 = dot(unity_gradientNoise_dir(ip + float2(0, 1)), fp - float2(0, 1));
    float d10 = dot(unity_gradientNoise_dir(ip + float2(1, 0)), fp - float2(1, 0));
    float d11 = dot(unity_gradientNoise_dir(ip + float2(1, 1)), fp - float2(1, 1));
    fp = fp * fp * fp * (fp * (fp * 6 - 15) + 10);
    return lerp(lerp(d00, d01, fp.y), lerp(d10, d11, fp.y), fp.x);
}

void Unity_GradientNoise_float(float2 UV, float Scale, out float Out)
{
    Out = unity_gradientNoise(UV * Scale) + 0.5;
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // Contenents

    float softEdge;
    float2 continent;

    const float2 UV = float2((id.x / chunkWidth) + chunkPosition.x, (id.y / chunkWidth) + chunkPosition.y);

    Unity_Voronoi_float(UV, 1.1, 11, softEdge, continent);

    continent *= (1 - smoothstep(0.2, 0.4, softEdge));

    // Perlin Noise

    float frequency = 1;
    const float persistance = 0.5;
    const float lacunarity = 1.9;
    const float scale = 3;
    float amplitude = 1;

    const float octaves = 7;
    const float maxHeight = 2;
    float noiseHeight = 0;

    for (int i = 0; i < octaves; i++) {
        const float sampleX = UV.x * frequency;
        const float sampleY = UV.y * frequency;

        float perlinValue;

        Unity_GradientNoise_float(float2(sampleX, sampleY) * 2 - 1, scale, perlinValue);
        noiseHeight += perlinValue * amplitude;
        
        amplitude *= persistance;
        frequency *= lacunarity;
    }

    noiseHeight /= maxHeight;

    // Height Calculation

    noiseHeight = clamp(noiseHeight, 0, 1);

    noiseHeight *= oceanHeight.Length;

    const float upper = ceil(noiseHeight);
    const float lower = floor(noiseHeight);

    const float distortedHeight = Unity_Lerp_float(oceanHeight[lower], oceanHeight[upper], frac(noiseHeight));

    // Map Points
    
    MapPoint mapPoint;

    mapPoint.color = distortedHeight;

    mapPoint.height = frac(noiseHeight);
    mapPoint.isSpawnPoint = 1;

    uint index = id.y * chunkWidth + id.x;

    mapPoints[index] = mapPoint;
}

